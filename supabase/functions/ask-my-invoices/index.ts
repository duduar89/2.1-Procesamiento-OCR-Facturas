import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

/**
 * üß† AGENTE TEXT-TO-SQL CON B√öSQUEDA SEM√ÅNTICA H√çBRIDA
 * 
 * Este agente combina:
 * 1. B√∫squeda sem√°ntica usando embeddings vectoriales
 * 2. B√∫squeda textual tradicional con SQL
 * 3. Respuestas inteligentes con contexto sem√°ntico
 * 
 * Funcionalidades:
 * - B√∫squeda por similitud sem√°ntica en productos y proveedores
 * - Consultas SQL inteligentes generadas por OpenAI
 * - Respuestas contextuales con recomendaciones
 * - Sistema h√≠brido para m√°xima precisi√≥n y cobertura
 */

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
}

Deno.serve(async (req) => {
  // Manejar preflight OPTIONS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Variables para capturar informaci√≥n antes de posibles errores
  let pregunta: string = ''
  let restaurante_id: string = ''
  let tiempoInicio: number = 0
  let requestParseado: boolean = false

  try {
    console.log('ÔøΩÔøΩ === AGENTE TEXT-TO-SQL INICIADO ===')
    
    // Parsear request
    const requestData = await req.json()
    pregunta = requestData.pregunta
    restaurante_id = requestData.restaurante_id
    
    if (!pregunta || !restaurante_id) {
      throw new Error('Faltan par√°metros: pregunta y restaurante_id son requeridos')
    }

    console.log('üìù Pregunta recibida:', pregunta)
    console.log('üè¢ Restaurante ID:', restaurante_id)
    
    // Iniciar cron√≥metro para m√©tricas
    tiempoInicio = Date.now()

    // 1. B√öSQUEDA H√çBRIDA ROBUSTA: Con m√∫ltiples fallbacks
    console.log('üîç Iniciando b√∫squeda h√≠brida robusta...')
    const resultadoHibrido = await busquedaHibridaRobusta(pregunta, restaurante_id)
    console.log('‚úÖ B√∫squeda h√≠brida robusta completada')

    // 2. Generar respuesta inteligente adaptativa seg√∫n el m√©todo usado
    console.log('üí¨ Generando respuesta inteligente adaptativa...')
    const respuesta = await generateResponseAdaptativa(pregunta, resultadoHibrido)
    console.log('‚úÖ Respuesta adaptativa generada')

    // 3. Calcular tiempo de respuesta y validar calidad
    const tiempoRespuesta = Date.now() - tiempoInicio
    const calidadValidada = validarCalidadRespuesta(resultadoHibrido)
    
    // 4. Preparar respuesta con metadatos de calidad
    const respuestaFinal = {
      success: true,
      respuesta,
      sql: resultadoHibrido.sql,
      datos: resultadoHibrido.datos_sql,
      resultados_semanticos: resultadoHibrido.resultados_semanticos,
      recomendaciones: resultadoHibrido.recomendaciones,
      // Metadatos de calidad y m√©todo usado
      calidad_respuesta: calidadValidada,
      metodo_utilizado: resultadoHibrido.metodo,
      mensaje_adicional: resultadoHibrido.mensaje,
      sugerencias: resultadoHibrido.sugerencias,
      timestamp: resultadoHibrido.timestamp,
      intentos_realizados: resultadoHibrido.intentos,
      // M√©tricas de rendimiento
      tiempo_respuesta_ms: tiempoRespuesta,
      resumen_intentos: generarResumenIntentos(resultadoHibrido.intentos)
    }
    
    // 5. Registrar m√©tricas del agente
    const metricas: MetricasAgente = {
      timestamp: new Date().toISOString(),
      pregunta,
      restaurante_id,
      metodo_utilizado: resultadoHibrido.metodo,
      calidad_respuesta: calidadValidada,
      tiempo_respuesta_ms: tiempoRespuesta,
      intentos_realizados: resultadoHibrido.intentos || [],
      exito: true
    }
    
    registrarMetricas(metricas)
    
    console.log(`‚úÖ Respuesta generada en ${tiempoRespuesta}ms con calidad: ${calidadValidada}`)
    
    return new Response(JSON.stringify(respuestaFinal), {
      headers: { 'Content-Type': 'application/json', ...corsHeaders }
    })

  } catch (error) {
    console.error('‚ùå Error cr√≠tico en agente:', error)
    
    // Usar el sistema inteligente de manejo de errores
    const respuestaError = await manejarErrorInteligentemente(error, pregunta, restaurante_id)
    
    // Calcular tiempo de respuesta si es posible
    const tiempoRespuesta = tiempoInicio > 0 ? Date.now() - tiempoInicio : 0
    
    // Registrar m√©tricas de error con informaci√≥n real
    try {
      const metricas: MetricasAgente = {
        timestamp: new Date().toISOString(),
        pregunta: pregunta || 'No disponible',
        restaurante_id: restaurante_id || 'No disponible',
        metodo_utilizado: respuestaError.metodo_utilizado || 'error_fallback',
        calidad_respuesta: respuestaError.calidad_respuesta || 'nula',
        tiempo_respuesta_ms: tiempoRespuesta,
        intentos_realizados: [],
        exito: respuestaError.success || false,
        error: error.message
      }
      
      registrarMetricas(metricas)
    } catch (metricasError) {
      console.error('‚ùå Error registrando m√©tricas:', metricasError)
    }
    
    // Preparar respuesta final con informaci√≥n del manejo inteligente
    const respuestaFinal = {
      ...respuestaError,
      timestamp: new Date().toISOString(),
      tiempo_respuesta_ms: tiempoRespuesta,
      pregunta_recibida: pregunta || 'No disponible',
      restaurante_solicitado: restaurante_id || 'No disponible'
    }
    
    return new Response(JSON.stringify(respuestaFinal), {
      status: respuestaError.success ? 200 : 500,
      headers: { 'Content-Type': 'application/json', ...corsHeaders }
    })
  }
})

// ===== GENERAR SQL CON OPENAI =====
async function generateSQL(pregunta: string, restauranteId: string): Promise<string> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    throw new Error('OPENAI_API_KEY no encontrada en variables de entorno')
  }

  const prompt = `
Eres un asistente experto en an√°lisis de datos para restaurantes, conectado a una base de datos Supabase.
Tu tarea es convertir la pregunta del usuario en una consulta SQL precisa y ejecutable.

ESQUEMA DE LA BASE DE DATOS:

- datos_extraidos_facturas: Cabecera de facturas
  - id (text), restaurante_id (uuid), proveedor_nombre (text), proveedor_cif (text)
  - numero_factura (text), fecha_factura (date), total_factura (numeric)
  - base_imponible (numeric), cuota_iva (numeric), tipo_iva (numeric)

- productos_extraidos: L√≠neas de productos de cada factura
  - id (uuid), documento_id (text), restaurante_id (uuid), producto_maestro_id (uuid)
  - descripcion_original (text), cantidad (numeric)
  - precio_unitario_sin_iva (numeric), precio_total_linea_sin_iva (numeric)
  - tipo_iva (numeric), fecha_extraccion (timestamp)

- productos_maestro: Productos normalizados
  - id (uuid), restaurante_id (uuid), nombre_normalizado (text), nombre_comercial (text)
  - categoria_principal (text), precio_ultimo (numeric)

- historial_precios_productos: Historial de precios
  - id (uuid), producto_maestro_id (uuid), restaurante_id (uuid)
  - fecha_compra (date), precio_unitario_sin_iva (numeric)

- proveedores: Maestro de proveedores
  - id (uuid), restaurante_id (uuid), nombre (text), cif (text)

REGLAS CR√çTICAS:
1. Responde SOLO con el c√≥digo SQL, sin explicaciones ni comentarios
2. SIEMPRE incluye WHERE restaurante_id = '${restauranteId}' en todas las consultas
3. Para buscar productos usa ILIKE '%termino%' en descripcion_original
4. Las fechas est√°n en formato 'YYYY-MM-DD'
5. Usa alias de tabla para evitar ambig√ºedades
6. Para c√°lculos de totales usa SUM(), para promedios AVG(), para conteos COUNT()
7. Para b√∫squedas aproximadas usa m√∫ltiples ILIKE con OR
8. Maneja faltas de ortograf√≠a con b√∫squedas flexibles

EJEMPLOS DE CONSULTAS:
- "¬øCu√°nto he gastado en aceite?": SELECT SUM(precio_total_linea_sin_iva) FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND descripcion_original ILIKE '%aceite%'
- "¬øCu√°nto he gastado en amas?": SELECT SUM(precio_total_linea_sin_iva) FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND (descripcion_original ILIKE '%amas%' OR descripcion_original ILIKE '%am√°s%' OR descripcion_original ILIKE '%amaz%')
- "¬øCu√°nto he gastado en Dimarba?": SELECT SUM(precio_total_linea_sin_iva) FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND (descripcion_original ILIKE '%dimarba%' OR descripcion_original ILIKE '%dimarva%' OR descripcion_original ILIKE '%sanlucar%' OR descripcion_original ILIKE '%sanl√∫car%')
- "¬øCu√°ntas facturas tengo?": SELECT COUNT(*) FROM datos_extraidos_facturas WHERE restaurante_id = '${restauranteId}'
- "¬øCu√°l es mi proveedor m√°s caro?": SELECT proveedor_nombre, AVG(total_factura) FROM datos_extraidos_facturas WHERE restaurante_id = '${restauranteId}' GROUP BY proveedor_nombre ORDER BY AVG(total_factura) DESC LIMIT 1
- "¬øEn qu√© producto me he gastado m√°s este mes?": SELECT descripcion_original, SUM(precio_total_linea_sin_iva) AS total_gastado FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND DATE_TRUNC('month', fecha_extraccion) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY descripcion_original ORDER BY total_gastado DESC LIMIT 1
- "¬øCu√°nto gast√© este mes?": SELECT SUM(precio_total_linea_sin_iva) FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND DATE_TRUNC('month', fecha_extraccion) = DATE_TRUNC('month', CURRENT_DATE)
- "¬øCu√°l es mi proveedor m√°s frecuente?": SELECT proveedor_nombre, COUNT(*) as num_facturas FROM datos_extraidos_facturas WHERE restaurante_id = '${restauranteId}' GROUP BY proveedor_nombre ORDER BY num_facturas DESC LIMIT 1

Pregunta del usuario: "${pregunta}"

SQL:
`

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openaiApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 500
    })
  })

  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`Error OpenAI: ${response.status} - ${errorText}`)
  }

  const data = await response.json()
  let sql = data.choices[0]?.message?.content?.trim()
  
  if (!sql) {
    throw new Error('No se recibi√≥ SQL de OpenAI')
  }

  // Limpiar formato markdown si existe
  sql = cleanSQLFromMarkdown(sql)
  
  console.log('üßπ SQL limpio:', sql)

  return sql
}

// ===== CONSULTAS B√ÅSICAS GARANTIZADAS =====
const CONSULTAS_BASICAS = {
  '√∫ltima_factura': `
    SELECT 
      df.numero_factura,
      df.proveedor_nombre,
      df.fecha_factura,
      df.fecha_extraccion,
      df.total_factura,
      EXTRACT(DAYS FROM (df.fecha_extraccion::date - df.fecha_factura::date)) as dias_diferencia
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    ORDER BY df.fecha_extraccion DESC, df.fecha_factura DESC
    LIMIT 1
  `,
  
  'facturas_esta_semana': `
    SELECT COUNT(*) as total_facturas, SUM(total_factura) as total_gastado
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    AND df.fecha_factura >= date_trunc('week', current_date)
  `,
  
  'gasto_este_mes': `
    SELECT SUM(total_factura) as total_mes
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    AND date_trunc('month', df.fecha_factura) = date_trunc('month', current_date)
  `,
  
  'proveedores_activos': `
    SELECT df.proveedor_nombre, COUNT(*) as num_facturas, SUM(df.total_factura) as total_gastado
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    AND df.fecha_factura >= current_date - interval '30 days'
    GROUP BY df.proveedor_nombre
    ORDER BY total_gastado DESC
  `,
  
  'productos_mas_comprados': `
    SELECT pe.descripcion_original, SUM(pe.cantidad) as cantidad_total, COUNT(*) as veces_comprado
    FROM productos_extraidos pe
    WHERE pe.restaurante_id = '{restauranteId}'
    AND pe.fecha_extraccion >= current_date - interval '30 days'
    GROUP BY pe.descripcion_original
    ORDER BY cantidad_total DESC
    LIMIT 10
  `,
  
  'resumen_anual': `
    SELECT 
      EXTRACT(YEAR FROM df.fecha_factura) as a√±o,
      COUNT(*) as total_facturas,
      SUM(df.total_factura) as total_gastado,
      AVG(df.total_factura) as promedio_factura
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    AND df.fecha_factura >= current_date - interval '1 year'
    GROUP BY EXTRACT(YEAR FROM df.fecha_factura)
    ORDER BY a√±o DESC
  `,
  
  'top_proveedores': `
    SELECT 
      df.proveedor_nombre,
      COUNT(*) as num_facturas,
      SUM(df.total_factura) as total_gastado,
      AVG(df.total_factura) as promedio_factura
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    GROUP BY df.proveedor_nombre
    ORDER BY total_gastado DESC
    LIMIT 5
  `,
  
  'productos_por_categoria': `
    SELECT 
      pm.categoria_principal,
      COUNT(*) as num_productos,
      SUM(pe.precio_total_linea_sin_iva) as total_gastado
    FROM productos_extraidos pe
    JOIN productos_maestro pm ON pe.producto_maestro_id = pm.id
    WHERE pe.restaurante_id = '{restauranteId}'
    AND pe.fecha_extraccion >= current_date - interval '90 days'
    GROUP BY pm.categoria_principal
    ORDER BY total_gastado DESC
  `,
  
  'facturas_recientemente_recibidas': `
    SELECT 
      df.numero_factura,
      df.proveedor_nombre,
      df.fecha_factura,
      df.fecha_extraccion,
      df.total_factura,
      CASE 
        WHEN df.fecha_extraccion::date = CURRENT_DATE THEN 'Hoy'
        WHEN df.fecha_extraccion::date = CURRENT_DATE - INTERVAL '1 day' THEN 'Ayer'
        ELSE CONCAT('Hace ', EXTRACT(DAYS FROM (CURRENT_DATE - df.fecha_extraccion::date)), ' d√≠as')
      END as tiempo_llegada,
      EXTRACT(DAYS FROM (df.fecha_extraccion::date - df.fecha_factura::date)) as dias_diferencia
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
      AND df.fecha_extraccion >= CURRENT_DATE - INTERVAL '7 days'
    ORDER BY df.fecha_extraccion DESC
    LIMIT 10
  `,
  
  'ultima_factura_sistema': `
    SELECT 
      df.numero_factura,
      df.proveedor_nombre,
      df.fecha_factura,
      df.fecha_extraccion,
      df.total_factura,
      EXTRACT(DAYS FROM (df.fecha_extraccion::date - df.fecha_factura::date)) as dias_diferencia,
      CASE 
        WHEN df.fecha_extraccion::date = CURRENT_DATE THEN 'Hoy'
        WHEN df.fecha_extraccion::date = CURRENT_DATE - INTERVAL '1 day' THEN 'Ayer'
        ELSE CONCAT('Hace ', EXTRACT(DAYS FROM (CURRENT_DATE - df.fecha_extraccion::date)), ' d√≠as')
      END as tiempo_llegada
    FROM datos_extraidos_facturas df
    WHERE df.restaurante_id = '{restauranteId}'
    ORDER BY df.fecha_extraccion DESC
    LIMIT 1
  `
}

// ===== DETECTAR TIPO DE CONSULTA =====
function detectQueryType(pregunta: string): string | null {
  const preguntaLower = pregunta.toLowerCase()
  
  // √öltima factura (por fecha de factura)
  if (preguntaLower.includes('√∫ltima factura') && 
      !preguntaLower.includes('sistema') && 
      !preguntaLower.includes('recibida')) {
    return '√∫ltima_factura'
  }
  
  // √öltima factura del sistema (por fecha de extracci√≥n)
  if (preguntaLower.includes('√∫ltima factura') && 
      (preguntaLower.includes('sistema') || preguntaLower.includes('recibida'))) {
    return 'ultima_factura_sistema'
  }
  
  // Facturas recientemente recibidas
  if (preguntaLower.includes('factura') && 
      (preguntaLower.includes('reciente') || preguntaLower.includes('recibida') || preguntaLower.includes('llegada'))) {
    return 'facturas_recientemente_recibidas'
  }
  
  // Facturas esta semana
  if ((preguntaLower.includes('esta semana') || preguntaLower.includes('semana actual')) && 
      (preguntaLower.includes('factura') || preguntaLower.includes('gasto'))) {
    return 'facturas_esta_semana'
  }
  
  // Gasto este mes
  if ((preguntaLower.includes('este mes') || preguntaLower.includes('mes actual')) && 
      (preguntaLower.includes('gast') || preguntaLower.includes('dinero') || preguntaLower.includes('total'))) {
    return 'gasto_este_mes'
  }
  
  // Proveedores activos
  if (preguntaLower.includes('proveedor') && 
      (preguntaLower.includes('activo') || preguntaLower.includes('√∫ltimo') || preguntaLower.includes('reciente'))) {
    return 'proveedores_activos'
  }
  
  // Productos m√°s comprados
  if (preguntaLower.includes('producto') && 
      (preguntaLower.includes('m√°s') || preguntaLower.includes('frecuente') || preguntaLower.includes('comprado'))) {
    return 'productos_mas_comprados'
  }
  
  // Resumen anual
  if (preguntaLower.includes('a√±o') && 
      (preguntaLower.includes('resumen') || preguntaLower.includes('total') || preguntaLower.includes('gasto'))) {
    return 'resumen_anual'
  }
  
  // Top proveedores
  if (preguntaLower.includes('proveedor') && 
      (preguntaLower.includes('top') || preguntaLower.includes('principal') || preguntaLower.includes('mayor'))) {
    return 'top_proveedores'
  }
  
  // Productos por categor√≠a
  if (preguntaLower.includes('categor√≠a') || preguntaLower.includes('categoria')) {
    return 'productos_por_categoria'
  }
  
  return null
}

// ===== GENERACI√ìN SQL MEJORADA =====
async function generateSQLMejorado(pregunta: string, restauranteId: string): Promise<string> {
  console.log('üîç Iniciando generaci√≥n SQL mejorada...')
  
  // 1. Detectar si es consulta b√°sica predefinida
  const tipoConsulta = detectQueryType(pregunta)
  if (tipoConsulta && CONSULTAS_BASICAS[tipoConsulta]) {
    console.log('‚úÖ Consulta b√°sica detectada:', tipoConsulta)
    const sqlBasico = CONSULTAS_BASICAS[tipoConsulta].replace('{restauranteId}', restauranteId)
    console.log('üìù SQL b√°sico generado:', sqlBasico)
    return sqlBasico
  }
  
  console.log('üîÑ No es consulta b√°sica, usando OpenAI...')
  
  // 2. Si no es b√°sica, usar OpenAI con prompt mejorado
  const promptMejorado = `
Eres un experto en SQL para restaurantes. Convierte esta pregunta en SQL ejecutable.

ESQUEMA DE BASE DE DATOS:
- datos_extraidos_facturas: id, restaurante_id, proveedor_nombre, numero_factura, fecha_factura, total_factura, base_imponible, cuota_iva, fecha_extraccion
- productos_extraidos: id, restaurante_id, descripcion_original, cantidad, precio_unitario_sin_iva, precio_total_linea_sin_iva, fecha_extraccion
- productos_maestro: id, restaurante_id, nombre_normalizado, categoria_principal
- proveedores: id, restaurante_id, nombre, cif

REGLAS OBLIGATORIAS:
1. SIEMPRE incluir WHERE restaurante_id = '${restauranteId}'
2. Para fechas recientes usar: fecha_factura >= current_date - interval 'X days'
3. Para "√∫ltimo/√∫ltima" usar ORDER BY fecha_factura DESC LIMIT 1
4. Para "este mes" usar: date_trunc('month', fecha_factura) = date_trunc('month', current_date)
5. Para "esta semana" usar: fecha_factura >= date_trunc('week', current_date)
6. Para b√∫squedas de productos usar ILIKE '%termino%' en descripcion_original
7. Si hay dudas sobre tablas, priorizar datos_extraidos_facturas
8. Para JOINs usar la tabla principal seg√∫n el contexto
9. Para agregaciones usar alias descriptivos (total_gastado, num_facturas, etc.)

EJEMPLOS:
- "√∫ltima factura" ‚Üí SELECT * FROM datos_extraidos_facturas WHERE restaurante_id = '${restauranteId}' ORDER BY fecha_factura DESC LIMIT 1
- "cu√°nto gast√© en aceite" ‚Üí SELECT SUM(precio_total_linea_sin_iva) as total_gastado FROM productos_extraidos WHERE restaurante_id = '${restauranteId}' AND descripcion_original ILIKE '%aceite%'
- "proveedores del mes" ‚Üí SELECT proveedor_nombre, COUNT(*) as num_facturas FROM datos_extraidos_facturas WHERE restaurante_id = '${restauranteId}' AND date_trunc('month', fecha_factura) = date_trunc('month', current_date) GROUP BY proveedor_nombre

PREGUNTA: "${pregunta}"

RESPONDE SOLO CON EL SQL:
`

  try {
    const sql = await callOpenAI(promptMejorado, 0.1, 400)
    console.log('‚úÖ SQL generado con OpenAI:', sql)
    return cleanSQLFromMarkdown(sql)
  } catch (error) {
    console.error('‚ùå Error generando SQL con OpenAI:', error)
    
    // Fallback: SQL b√°sico de b√∫squeda
    console.log('üîÑ Usando SQL de fallback...')
    return `
      SELECT df.numero_factura, df.proveedor_nombre, df.fecha_factura, df.total_factura
      FROM datos_extraidos_facturas df
      WHERE df.restaurante_id = '${restauranteId}'
      ORDER BY df.fecha_factura DESC
      LIMIT 5
    `
  }
}

// ===== B√öSQUEDA SEM√ÅNTICA H√çBRIDA =====
async function buscarSemanticamente(pregunta: string, restauranteId: string): Promise<any[]> {
  console.log('üß† === B√öSQUEDA SEM√ÅNTICA INICIADA ===')
  
  try {
    // 1. Generar embedding de la pregunta
    const embeddingPregunta = await generateEmbedding(pregunta)
    if (!embeddingPregunta || embeddingPregunta.length === 0) {
      console.log('‚ö†Ô∏è No se pudo generar embedding, saltando b√∫squeda sem√°ntica')
      return []
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // 2. B√∫squeda sem√°ntica en productos
    console.log('üîç Buscando productos por similitud sem√°ntica...')
    const { data: productosSemanticos, error: errorProductos } = await supabaseClient
      .from('productos_embeddings')
      .select(`
        id,
        descripcion_original,
        categoria,
        embedding,
        frecuencia_uso
      `)
      .eq('restaurante_id', restauranteId)
      .not('embedding', 'is', null)
      .order('frecuencia_uso', { ascending: false })
      .limit(20)

    if (errorProductos) {
      console.error('‚ùå Error en b√∫squeda sem√°ntica de productos:', errorProductos)
    }

    // 3. B√∫squeda sem√°ntica en proveedores
    console.log('üè¢ Buscando proveedores por similitud sem√°ntica...')
    const { data: proveedoresSemanticos, error: errorProveedores } = await supabaseClient
      .from('proveedores_embeddings')
      .select(`
        id,
        nombre_proveedor,
        embedding,
        frecuencia_uso
      `)
      .eq('restaurante_id', restauranteId)
      .not('embedding', 'is', null)
      .order('frecuencia_uso', { ascending: false })
      .limit(10)

    if (errorProveedores) {
      console.error('‚ùå Error en b√∫squeda sem√°ntica de proveedores:', errorProveedores)
    }

    // 4. Calcular similitudes y ranking
    const resultados = []
    
    // Productos sem√°nticos
    if (productosSemanticos && productosSemanticos.length > 0) {
      for (const producto of productosSemanticos) {
        const similitud = calcularSimilitudVectorial(embeddingPregunta, producto.embedding)
        if (similitud > 0.7) { // Umbral de similitud
          resultados.push({
            tipo: 'producto',
            id: producto.id,
            descripcion: producto.descripcion_original,
            categoria: producto.categoria,
            similitud: similitud,
            fuente: 'semantica'
          })
        }
      }
    }

    // Proveedores sem√°nticos
    if (proveedoresSemanticos && proveedoresSemanticos.length > 0) {
      for (const proveedor of proveedoresSemanticos) {
        const similitud = calcularSimilitudVectorial(embeddingPregunta, proveedor.embedding)
        if (similitud > 0.7) { // Umbral de similitud
          resultados.push({
            tipo: 'proveedor',
            id: proveedor.id,
            nombre: proveedor.nombre_proveedor,
            similitud: similitud,
            fuente: 'semantica'
          })
        }
      }
    }

    // 5. Ordenar por similitud
    resultados.sort((a, b) => b.similitud - a.similitud)
    
    console.log(`‚úÖ B√∫squeda sem√°ntica completada: ${resultados.length} resultados`)
    return resultados

  } catch (error) {
    console.error('‚ùå Error en b√∫squeda sem√°ntica:', error)
    return []
  }
}

// ===== GENERAR EMBEDDING =====
async function generateEmbedding(texto: string): Promise<number[]> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    console.warn('‚ö†Ô∏è OPENAI_API_KEY no encontrada, saltando generaci√≥n de embedding')
    return []
  }

  try {
    console.log('üß† Generando embedding para:', texto.substring(0, 100) + '...')
    
    const response = await fetch('https://api.openai.com/v1/embeddings', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        input: texto,
        model: 'text-embedding-3-small',
        encoding_format: 'float'
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Error en OpenAI API:', response.status, errorText)
      return []
    }

    const data = await response.json()
    const embedding = data.data[0].embedding
    
    console.log('‚úÖ Embedding generado, dimensiones:', embedding.length)
    return embedding

  } catch (error) {
    console.error('‚ùå Error generando embedding:', error)
    return []
  }
}

// ===== CALCULAR SIMILITUD VECTORIAL =====
function calcularSimilitudVectorial(vector1: number[], vector2: number[]): number {
  if (!vector1 || !vector2 || vector1.length !== vector2.length) {
    return 0
  }

  try {
    // Calcular similitud coseno
    let dotProduct = 0
    let norm1 = 0
    let norm2 = 0

    for (let i = 0; i < vector1.length; i++) {
      dotProduct += vector1[i] * vector2[i]
      norm1 += vector1[i] * vector1[i]
      norm2 += vector2[i] * vector2[i]
    }

    norm1 = Math.sqrt(norm1)
    norm2 = Math.sqrt(norm2)

    if (norm1 === 0 || norm2 === 0) {
      return 0
    }

    const similitud = dotProduct / (norm1 * norm2)
    return Math.max(0, similitud) // Asegurar que no sea negativo

  } catch (error) {
    console.error('‚ùå Error calculando similitud vectorial:', error)
    return 0
  }
}

// ===== B√öSQUEDA H√çBRIDA ROBUSTA CON M√öLTIPLES FALLBACKS =====
async function busquedaHibridaRobusta(pregunta: string, restauranteId: string): Promise<any> {
  console.log('üîç === B√öSQUEDA H√çBRIDA ROBUSTA INICIADA ===')
  
  let intentos = []
  let resultadoFinal = null
  
      // 1. INTENTO PRINCIPAL: SQL Inteligente + Sem√°ntica
    try {
      console.log('üéØ Intento 1: SQL Inteligente + Sem√°ntica')
      
      // Generar SQL MEJORADO
      const sql = await generateSQLMejorado(pregunta, restauranteId)
      console.log('üìù SQL mejorado generado:', sql)
    
    // Ejecutar SQL
    const resultadoSQL = await executeSQL(sql, restauranteId)
    console.log('‚ö° Resultado SQL obtenido')
    
    // B√∫squeda sem√°ntica en paralelo
    const resultadosSemanticos = await buscarSemanticamente(pregunta, restauranteId)
    console.log('üß† Resultados sem√°nticos obtenidos:', resultadosSemanticos.length)
    
    if (resultadoSQL && Array.isArray(resultadoSQL) && resultadoSQL.length > 0) {
      resultadoFinal = {
        pregunta: pregunta,
        sql: sql,
        datos_sql: resultadoSQL,
        resultados_semanticos: resultadosSemanticos,
        recomendaciones: generarRecomendaciones(resultadosSemanticos),
        metodo: 'sql_exitoso',
        calidad: 'alta'
      }
      
      intentos.push({ metodo: 'sql_exitoso', exito: true, datos: resultadoSQL.length })
      console.log('‚úÖ Intento 1 exitoso con datos SQL')
      return resultadoFinal
    } else {
      intentos.push({ metodo: 'sql_exitoso', exito: false, razon: 'sin_datos' })
      console.log('‚ö†Ô∏è SQL exitoso pero sin datos')
    }
    
  } catch (sqlError) {
    console.log('‚ùå Intento 1 fall√≥ (SQL):', sqlError.message)
    intentos.push({ metodo: 'sql_exitoso', exito: false, error: sqlError.message })
  }
  
  // 2. FALLBACK 1: Solo B√∫squeda Sem√°ntica
  try {
    console.log('üîÑ Intento 2: Solo B√∫squeda Sem√°ntica')
    
    const resultadosSemanticos = await buscarSemanticamente(pregunta, restauranteId)
    
    if (resultadosSemanticos && resultadosSemanticos.length > 0) {
      resultadoFinal = {
        pregunta: pregunta,
        sql: null,
        datos_sql: [],
        resultados_semanticos: resultadosSemanticos,
        recomendaciones: generarRecomendaciones(resultadosSemanticos),
        metodo: 'semantico',
        calidad: 'media',
        mensaje: 'No pude ejecutar la consulta SQL, pero encontr√© productos similares por similitud sem√°ntica.'
      }
      
      intentos.push({ metodo: 'semantico', exito: true, datos: resultadosSemanticos.length })
      console.log('‚úÖ Intento 2 exitoso con b√∫squeda sem√°ntica')
      return resultadoFinal
    } else {
      intentos.push({ metodo: 'semantico', exito: false, razon: 'sin_resultados' })
      console.log('‚ö†Ô∏è B√∫squeda sem√°ntica sin resultados')
    }
    
  } catch (semanticError) {
    console.log('‚ùå Intento 2 fall√≥ (Sem√°ntica):', semanticError.message)
    intentos.push({ metodo: 'semantico', exito: false, error: semanticError.message })
  }
  
  // 3. FALLBACK 2: B√∫squeda Textual Simple
  try {
    console.log('üîÑ Intento 3: B√∫squeda Textual Simple')
    
    const resultadoTextual = await busquedaTextualSimple(pregunta, restauranteId)
    
    if (resultadoTextual && resultadoTextual.length > 0) {
      resultadoFinal = {
        pregunta: pregunta,
        sql: null,
        datos_sql: resultadoTextual,
        resultados_semanticos: [],
        recomendaciones: [],
        metodo: 'textual_simple',
        calidad: 'baja',
        mensaje: 'Us√© una b√∫squeda b√°sica por texto para encontrar resultados similares.'
      }
      
      intentos.push({ metodo: 'textual_simple', exito: true, datos: resultadoTextual.length })
      console.log('‚úÖ Intento 3 exitoso con b√∫squeda textual')
      return resultadoFinal
    } else {
      intentos.push({ metodo: 'textual_simple', exito: false, razon: 'sin_resultados' })
      console.log('‚ö†Ô∏è B√∫squeda textual sin resultados')
    }
    
  } catch (textualError) {
    console.log('‚ùå Intento 3 fall√≥ (Textual):', textualError.message)
    intentos.push({ metodo: 'textual_simple', exito: false, error: textualError.message })
  }
  
  // 4. FALLBACK FINAL: Datos B√°sicos del Restaurante
  try {
    console.log('üîÑ Intento 4: Datos B√°sicos del Restaurante')
    
    const datosBasicos = await getDatosBasicosRestaurante(restauranteId)
    
    resultadoFinal = {
      pregunta: pregunta,
      sql: null,
      datos_sql: datosBasicos,
      resultados_semanticos: [],
      recomendaciones: [],
      metodo: 'fallback_basico',
      calidad: 'minima',
      mensaje: 'No pude responder tu pregunta espec√≠fica, pero aqu√≠ tienes un resumen general de tus datos del restaurante.',
      sugerencias: [
        'Intenta reformular tu pregunta de manera m√°s simple',
        'Usa t√©rminos m√°s generales (ej: "aceite" en lugar de "aceite de oliva extra virgen")',
        'Verifica que el nombre del producto o proveedor est√© escrito correctamente'
      ]
    }
    
    intentos.push({ metodo: 'fallback_basico', exito: true, datos: datosBasicos.length })
    console.log('‚úÖ Intento 4 exitoso con datos b√°sicos')
    
  } catch (fallbackError) {
    console.log('‚ùå Intento 4 fall√≥ (Fallback):', fallbackError.message)
    intentos.push({ metodo: 'fallback_basico', exito: false, error: fallbackError.message })
    
    // √öLTIMO RECURSO: Respuesta gen√©rica
    resultadoFinal = {
      pregunta: pregunta,
      sql: null,
      datos_sql: [],
      resultados_semanticos: [],
      recomendaciones: [],
      metodo: 'respuesta_generica',
      calidad: 'nula',
      mensaje: 'Lo siento, no pude procesar tu consulta en este momento. Por favor, intenta m√°s tarde o contacta con soporte.',
      error_tecnico: fallbackError.message
    }
  }
  
  // Agregar historial de intentos al resultado
  resultadoFinal.intentos = intentos
  resultadoFinal.timestamp = new Date().toISOString()
  
  console.log('üìä Resumen de intentos:', intentos)
  console.log('‚úÖ B√∫squeda h√≠brida robusta completada con m√©todo:', resultadoFinal.metodo)
  
  return resultadoFinal
}

// ===== B√öSQUEDA TEXTUAL SIMPLE (FALLBACK) =====
async function busquedaTextualSimple(pregunta: string, restauranteId: string): Promise<any[]> {
  console.log('üîç Iniciando b√∫squeda textual simple...')
  
  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )
    
    // Extraer palabras clave de la pregunta
    const palabrasClave = extraerPalabrasClave(pregunta)
    console.log('üîë Palabras clave extra√≠das:', palabrasClave)
    
    if (palabrasClave.length === 0) {
      return []
    }
    
    // B√∫squeda en productos con palabras clave
    const { data: productos, error: errorProductos } = await supabaseClient
      .from('productos_extraidos')
      .select(`
        id,
        descripcion_original,
        cantidad,
        precio_total_linea_sin_iva,
        fecha_extraccion
      `)
      .eq('restaurante_id', restauranteId)
      .or(palabrasClave.map(palabra => `descripcion_original.ilike.%${palabra}%`).join(','))
      .order('fecha_extraccion', { ascending: false })
      .limit(15)
    
    if (errorProductos) {
      console.error('‚ùå Error en b√∫squeda textual de productos:', errorProductos)
      return []
    }
    
    // B√∫squeda en proveedores
    const { data: proveedores, error: errorProveedores } = await supabaseClient
      .from('datos_extraidos_facturas')
      .select(`
        proveedor_nombre,
        total_factura,
        fecha_factura
      `)
      .eq('restaurante_id', restauranteId)
      .or(palabrasClave.map(palabra => `proveedor_nombre.ilike.%${palabra}%`).join(','))
      .order('fecha_factura', { ascending: false })
      .limit(10)
    
    if (errorProveedores) {
      console.error('‚ùå Error en b√∫squeda textual de proveedores:', errorProveedores)
    }
    
    // Combinar resultados
    const resultados = []
    
    if (productos && productos.length > 0) {
      resultados.push(...productos.map(p => ({ ...p, tipo: 'producto' })))
    }
    
    if (proveedores && proveedores.length > 0) {
      resultados.push(...proveedores.map(p => ({ ...p, tipo: 'proveedor' })))
    }
    
    console.log(`‚úÖ B√∫squeda textual completada: ${resultados.length} resultados`)
    return resultados
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda textual simple:', error)
    return []
  }
}

// ===== EXTRAER PALABRAS CLAVE =====
function extraerPalabrasClave(texto: string): string[] {
  // Limpiar texto
  const textoLimpio = texto.toLowerCase()
    .replace(/[^\w\s]/g, ' ') // Remover caracteres especiales
    .replace(/\s+/g, ' ')     // Normalizar espacios
    .trim()
  
  // Dividir en palabras
  const palabras = textoLimpio.split(' ')
  
  // Filtrar palabras relevantes (m√°s de 2 caracteres, no art√≠culos/preposiciones)
  const palabrasIrrelevantes = ['el', 'la', 'los', 'las', 'de', 'del', 'en', 'con', 'por', 'para', 'a', 'al', 'un', 'una', 'unos', 'unas', 'que', 'cual', 'cuanto', 'cuanta', 'cuantos', 'cuantas', 'este', 'esta', 'estos', 'estas', 'ese', 'esa', 'esos', 'esas', 'aquel', 'aquella', 'aquellos', 'aquellas']
  
  const palabrasClave = palabras.filter(palabra => 
    palabra.length > 2 && 
    !palabrasIrrelevantes.includes(palabra) &&
    !/^\d+$/.test(palabra) // No n√∫meros solos
  )
  
  // Limitar a m√°ximo 5 palabras clave
  return palabrasClave.slice(0, 5)
}

// ===== OBTENER DATOS B√ÅSICOS DEL RESTAURANTE =====
async function getDatosBasicosRestaurante(restauranteId: string): Promise<any[]> {
  console.log('üè¢ Obteniendo datos b√°sicos del restaurante...')
  
  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )
    
    // 1. Resumen de facturas
    const { data: resumenFacturas, error: errorFacturas } = await supabaseClient
      .from('datos_extraidos_facturas')
      .select('total_factura, fecha_factura')
      .eq('restaurante_id', restauranteId)
      .order('fecha_factura', { ascending: false })
      .limit(5)
    
    // 2. Top productos
    const { data: topProductos, error: errorProductos } = await supabaseClient
      .from('productos_extraidos')
      .select('descripcion_original, precio_total_linea_sin_iva')
      .eq('restaurante_id', restauranteId)
      .order('precio_total_linea_sin_iva', { ascending: false })
      .limit(5)
    
    // 3. Top proveedores
    const { data: topProveedores, error: errorProveedores } = await supabaseClient
      .from('datos_extraidos_facturas')
      .select('proveedor_nombre, total_factura')
      .eq('restaurante_id', restauranteId)
      .order('total_factura', { ascending: false })
      .limit(5)
    
    // Combinar datos b√°sicos
    const datosBasicos = {
      resumen_facturas: resumenFacturas || [],
      top_productos: topProductos || [],
      top_proveedores: topProveedores || [],
      timestamp: new Date().toISOString()
    }
    
    console.log('‚úÖ Datos b√°sicos obtenidos')
    return [datosBasicos]
    
  } catch (error) {
    console.error('‚ùå Error obteniendo datos b√°sicos:', error)
    return [{
      mensaje: 'No se pudieron obtener datos b√°sicos del restaurante',
      error: error.message,
      timestamp: new Date().toISOString()
    }]
  }
}

// ===== GENERAR RECOMENDACIONES =====
function generarRecomendaciones(resultadosSemanticos: any[]): any[] {
  if (!resultadosSemanticos || resultadosSemanticos.length === 0) {
    return []
  }
  
  const recomendaciones = []
  const topResultados = resultadosSemanticos.slice(0, 3)
  
  for (const resultado of topResultados) {
    if (resultado.tipo === 'producto') {
      recomendaciones.push({
        tipo: 'producto_similar',
        descripcion: resultado.descripcion,
        categoria: resultado.categoria,
        similitud: Math.round(resultado.similitud * 100),
        sugerencia: `Producto similar encontrado: "${resultado.descripcion}" (${Math.round(resultado.similitud * 100)}% similitud)`
      })
    } else if (resultado.tipo === 'proveedor') {
      recomendaciones.push({
        tipo: 'proveedor_similar',
        nombre: resultado.nombre,
        similitud: Math.round(resultado.similitud * 100),
        sugerencia: `Proveedor similar encontrado: "${resultado.nombre}" (${Math.round(resultado.similitud * 100)}% similitud)`
      })
    }
  }
  
  return recomendaciones
}

// ===== LIMPIAR SQL DE MARKDOWN =====
function cleanSQLFromMarkdown(sql: string): string {
  // Remover backticks y etiquetas de lenguaje
  sql = sql.replace(/```sql\s*/gi, '')  // Remover ```sql al inicio
  sql = sql.replace(/```\s*$/gi, '')    // Remover ``` al final
  sql = sql.replace(/^```\s*/gi, '')    // Remover ``` al inicio (sin sql)
  
  // Remover espacios extra y l√≠neas vac√≠as
  sql = sql.trim()
  
  // Remover comentarios de markdown si existen
  sql = sql.replace(/^#+\s*/gm, '')     // Remover headers markdown
  
  console.log('üßπ SQL original:', sql)
  
  return sql
}

// ===== EJECUTAR SQL DE FORMA SEGURA =====
async function executeSQL(sql: string, restauranteId: string): Promise<any> {
  // Validar que el SQL es seguro
  if (!isSQLSafe(sql, restauranteId)) {
    throw new Error('Consulta SQL no permitida por seguridad')
  }

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
  )

  console.log('üîê Ejecutando SQL validado:', sql)

  try {
    // Intentar usar execute_dynamic_sql primero
    const { data, error } = await supabaseClient.rpc('execute_dynamic_sql', {
      sql_query: sql,
      restaurante_id: restauranteId
    })

    if (error) {
      console.error('‚ùå Error con execute_dynamic_sql:', error)
      throw new Error(`Error ejecutando consulta: ${error.message}`)
    }

    // Validar y limpiar los datos antes de retornarlos
    if (data === null || data === undefined) {
      console.log('‚ö†Ô∏è Datos SQL nulos, retornando array vac√≠o')
      return []
    }

    // Si es un string, intentar parsearlo como JSON
    if (typeof data === 'string') {
      try {
        const parsedData = JSON.parse(data)
        console.log('‚úÖ Datos SQL parseados como JSON:', typeof parsedData)
        return parsedData
      } catch (parseError) {
        console.log('‚ö†Ô∏è Datos SQL no son JSON v√°lido, retornando como string')
        return data
      }
    }

    // Si es un array o objeto, retornarlo directamente
    console.log('‚úÖ Datos SQL retornados directamente:', typeof data)
    return data

  } catch (rpcError) {
    console.error('‚ùå Error con RPC, intentando ejecuci√≥n directa:', rpcError)
    
    // Fallback: ejecutar SQL directamente si es posible
    try {
      // Extraer la tabla principal del SQL
      const tableMatch = sql.match(/FROM\s+(\w+)/i)
      if (tableMatch) {
        const tableName = tableMatch[1]
        console.log('üîÑ Intentando ejecuci√≥n directa en tabla:', tableName)
        
        // Ejecutar una consulta simplificada
        const { data: directData, error: directError } = await supabaseClient
          .from(tableName)
          .select('*')
          .eq('restaurante_id', restauranteId)
          .limit(10)
        
        if (directError) {
          throw new Error(`Error en ejecuci√≥n directa: ${directError.message}`)
        }
        
        console.log('‚úÖ Ejecuci√≥n directa exitosa')
        return directData
      }
    } catch (fallbackError) {
      console.error('‚ùå Error en fallback:', fallbackError)
    }
    
    throw new Error(`Error ejecutando consulta: ${rpcError.message}`)
  }
}

// ===== VALIDACI√ìN DE SEGURIDAD SQL =====
function isSQLSafe(sql: string, restauranteId: string): boolean {
  const lowerSQL = sql.toLowerCase().trim()
  
  // Solo permitir SELECT
  if (!lowerSQL.startsWith('select')) {
    console.error('‚ùå SQL no empieza con SELECT:', lowerSQL)
    return false
  }
  
  // Debe incluir el restaurante_id
  if (!lowerSQL.includes(`restaurante_id = '${restauranteId}'`)) {
    console.error('‚ùå SQL no incluye filtro de restaurante_id')
    return false
  }
  
  // No permitir comandos peligrosos
  const dangerous = ['drop', 'delete', 'insert', 'update', 'create', 'alter', 'truncate']
  if (dangerous.some(cmd => lowerSQL.includes(cmd))) {
    console.error('‚ùå SQL contiene comandos peligrosos:', lowerSQL)
    return false
  }
  
  // No permitir m√∫ltiples statements
  if (lowerSQL.includes(';') && lowerSQL.split(';').length > 2) {
    console.error('‚ùå SQL contiene m√∫ltiples statements')
    return false
  }
  
  console.log('‚úÖ SQL validado como seguro')
  return true
}

// ===== GENERAR RESPUESTA INTELIGENTE CON CONTEXTO SEM√ÅNTICO =====
async function generateResponseInteligente(pregunta: string, resultadoHibrido: any): Promise<string> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    return 'Error: No se pudo generar respuesta inteligente'
  }

  // Validar que resultadoHibrido existe y tiene la estructura esperada
  if (!resultadoHibrido || typeof resultadoHibrido !== 'object') {
    return 'Error: No se pudieron procesar los resultados de la b√∫squeda'
  }

  // Preparar datos seguros para el prompt
  const sqlSeguro = resultadoHibrido.sql || 'No disponible'
  const datosSQLSeguro = resultadoHibrido.datos_sql || []
  const resultadosSemanticosSeguro = resultadoHibrido.resultados_semanticos || []
  const recomendacionesSeguro = resultadoHibrido.recomendaciones || []

  const prompt = `
Eres un asistente inteligente que analiza resultados de b√∫squeda h√≠brida (sem√°ntica + SQL) para restaurantes.
Proporciona respuestas contextuales y √∫tiles basadas en la similitud sem√°ntica y los datos SQL.

PREGUNTA ORIGINAL: "${pregunta}"

RESULTADOS H√çBRIDOS:
- SQL ejecutado: ${sqlSeguro}
- Datos SQL: ${JSON.stringify(datosSQLSeguro)}
- Resultados sem√°nticos: ${JSON.stringify(resultadosSemanticosSeguro)}
- Recomendaciones: ${JSON.stringify(recomendacionesSeguro)}

INSTRUCCIONES:
1. Analiza tanto los datos SQL como los resultados sem√°nticos
2. Si hay resultados sem√°nticos, incl√∫yelos en tu respuesta
3. Formato de moneda: siempre usa ‚Ç¨ con comas para miles (ej: 1.250,50 ‚Ç¨)
4. Formato de fechas: DD/MM/YYYY
5. S√© espec√≠fico y √∫til para un restaurante
6. Incluye recomendaciones basadas en similitud sem√°ntica
7. Si no hay datos SQL pero hay resultados sem√°nticos, sugiere b√∫squedas alternativas
8. Si hay errores en los datos, explica amablemente qu√© pas√≥

EJEMPLOS DE RESPUESTAS:
- Con datos SQL + sem√°nticos: "Has gastado 1.250,50 ‚Ç¨ en aceite este mes. Tambi√©n encontr√© productos similares: 'aceite de girasol' (95% similitud) y 'aceite vegetal' (87% similitud)."
- Solo sem√°nticos: "No encontr√© gastos exactos, pero detect√© productos similares: 'aceite de oliva' (92% similitud), 'aceite girasol' (88% similitud). Te sugiero buscar por estos t√©rminos."
- Sin datos: "No encontr√© resultados para tu b√∫squeda. ¬øQuiz√°s te refieres a t√©rminos similares? Puedo ayudarte a encontrar productos relacionados."
- Con errores: "Hubo un problema procesando tu consulta, pero puedo ayudarte con informaci√≥n b√°sica. ¬øPodr√≠as reformular tu pregunta?"

Respuesta inteligente:
`

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openaiApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 400
    })
  })

  if (!response.ok) {
    return 'Error: No se pudo generar respuesta inteligente'
  }

  const data = await response.json()
  return data.choices[0]?.message?.content?.trim() || 'No se pudo generar respuesta inteligente'
}

// ===== GENERAR RESPUESTA AMIGABLE (MANTENER PARA COMPATIBILIDAD) =====
async function generateResponse(pregunta: string, datos: any): Promise<string> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    return 'Error: No se pudo generar respuesta amigable'
  }

  const prompt = `
Eres un asistente amigable que convierte resultados de SQL en respuestas naturales y √∫tiles para un restaurante.

Pregunta original: "${pregunta}"
Datos obtenidos: ${JSON.stringify(datos)}

INSTRUCCIONES:
1. Si los datos est√°n vac√≠os ([] o null), explica amablemente que no se encontraron resultados
2. Sugiere posibles variaciones del t√©rmino buscado
3. Formato de moneda: siempre usa ‚Ç¨ con comas para miles (ej: 1.250,50 ‚Ç¨)
4. Formato de fechas: DD/MM/YYYY
5. S√© espec√≠fico y √∫til para un restaurante
6. Si es un array con m√∫ltiples resultados, haz un resumen claro

EJEMPLOS DE RESPUESTAS:
- Con datos: "Has gastado 1.250,50 ‚Ç¨ en aceite de oliva este mes. Es tu producto m√°s comprado."
- Sin datos: "No encontr√© gastos en 'amas'. ¬øQuiz√°s te refieres a 'Amas' (con may√∫scula) o 'Am√°s'? Tambi√©n puedes buscar por 'harina' o 'pan' si buscas productos similares."
- M√∫ltiples resultados: "Tienes 3 proveedores principales: Makro (5 facturas, 2.450,30 ‚Ç¨), Amas (3 facturas, 890,15 ‚Ç¨) y Dimarba (2 facturas, 567,80 ‚Ç¨)."

Respuesta:
`

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openaiApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 300
    })
  })

  if (!response.ok) {
    return 'Error: No se pudo generar respuesta amigable'
  }

  const data = await response.json()
  return data.choices[0]?.message?.content?.trim() || 'No se pudo generar respuesta'
}

// ===== GENERAR RESPUESTA ADAPTATIVA SEG√öN CALIDAD Y M√âTODO =====
async function generateResponseAdaptativa(pregunta: string, resultadoHibrido: any): Promise<string> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    return generarRespuestaFallback(resultadoHibrido)
  }

  try {
    // Determinar el tipo de respuesta seg√∫n la calidad y m√©todo
    const tipoRespuesta = determinarTipoRespuesta(resultadoHibrido)
    
    switch (tipoRespuesta) {
      case 'alta_calidad':
        return await generateResponseAltaCalidad(pregunta, resultadoHibrido)
      case 'media_calidad':
        return await generateResponseMediaCalidad(pregunta, resultadoHibrido)
      case 'baja_calidad':
        return await generateResponseBajaCalidad(pregunta, resultadoHibrido)
      case 'fallback':
        return await generateResponseFallback(pregunta, resultadoHibrido)
      default:
        return generarRespuestaFallback(resultadoHibrido)
    }
    
  } catch (error) {
    console.error('‚ùå Error generando respuesta adaptativa:', error)
    return generarRespuestaFallback(resultadoHibrido)
  }
}

// ===== DETERMINAR TIPO DE RESPUESTA =====
function determinarTipoRespuesta(resultadoHibrido: any): string {
  if (!resultadoHibrido || !resultadoHibrido.calidad) {
    return 'fallback'
  }
  
  switch (resultadoHibrido.calidad) {
    case 'alta':
      return 'alta_calidad'
    case 'media':
      return 'media_calidad'
    case 'baja':
      return 'baja_calidad'
    case 'minima':
    case 'nula':
      return 'fallback'
    default:
      return 'fallback'
  }
}

// ===== RESPUESTA DE ALTA CALIDAD (SQL + Sem√°ntica) =====
async function generateResponseAltaCalidad(pregunta: string, resultadoHibrido: any): Promise<string> {
  // Usar la nueva funci√≥n de respuestas mejoradas
  return await generateResponseMejorada(pregunta, resultadoHibrido.datos_sql, resultadoHibrido.metodo)
}

// ===== RESPUESTA DE MEDIA CALIDAD (Solo Sem√°ntica) =====
async function generateResponseMediaCalidad(pregunta: string, resultadoHibrido: any): Promise<string> {
  // Usar la nueva funci√≥n de respuestas mejoradas con datos sem√°nticos
  const respuesta = await generateResponseMejorada(pregunta, resultadoHibrido.resultados_semanticos, resultadoHibrido.metodo)
  
  // Agregar contexto sobre la b√∫squeda sem√°ntica
  return `${respuesta}

${resultadoHibrido.mensaje || 'Estos resultados se obtuvieron usando b√∫squeda sem√°ntica.'}`
}

// ===== RESPUESTA DE BAJA CALIDAD (Solo Textual) =====
async function generateResponseBajaCalidad(pregunta: string, resultadoHibrido: any): Promise<string> {
  // Usar la nueva funci√≥n de respuestas mejoradas con datos textuales
  const respuesta = await generateResponseMejorada(pregunta, resultadoHibrido.datos_sql, resultadoHibrido.metodo)
  
  // Agregar contexto sobre la b√∫squeda textual
  return `${respuesta}

${resultadoHibrido.mensaje || 'Estos resultados se obtuvieron usando b√∫squeda textual b√°sica.'}`
}

// ===== RESPUESTA DE FALLBACK (Datos B√°sicos) =====
async function generateResponseFallback(pregunta: string, resultadoHibrido: any): Promise<string> {
  // Usar la nueva funci√≥n de respuestas mejoradas con datos b√°sicos
  const respuesta = await generateResponseMejorada(pregunta, resultadoHibrido.datos_sql, resultadoHibrido.metodo)
  
  // Agregar contexto sobre el fallback
  return `${respuesta}

${resultadoHibrido.mensaje || 'No pude responder tu pregunta espec√≠fica, pero aqu√≠ tienes un resumen general.'}

${resultadoHibrido.sugerencias ? resultadoHibrido.sugerencias.map(s => `‚Ä¢ ${s}`).join('\n') : ''}`
}

// ===== RESPUESTA FALLBACK SIN OPENAI =====
function generarRespuestaFallback(resultadoHibrido: any): string {
  if (!resultadoHibrido) {
    return 'Lo siento, no pude procesar tu consulta. Por favor, intenta m√°s tarde.'
  }
  
  let respuesta = resultadoHibrido.mensaje || 'No pude responder tu pregunta espec√≠fica.'
  
  if (resultadoHibrido.sugerencias && resultadoHibrido.sugerencias.length > 0) {
    respuesta += '\n\nSugerencias:\n' + resultadoHibrido.sugerencias.map(s => `‚Ä¢ ${s}`).join('\n')
  }
  
  if (resultadoHibrido.datos_sql && resultadoHibrido.datos_sql.length > 0) {
    respuesta += '\n\nDatos disponibles:\n' + JSON.stringify(resultadoHibrido.datos_sql, null, 2)
  }
  
  return respuesta
}

// ===== LLAMADA A OPENAI UNIFICADA =====
async function callOpenAI(prompt: string, temperature: number, maxTokens: number): Promise<string> {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
  if (!openaiApiKey) {
    throw new Error('OPENAI_API_KEY no disponible')
  }

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openaiApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: temperature,
      max_tokens: maxTokens
    })
  })

  if (!response.ok) {
    throw new Error(`Error OpenAI: ${response.status}`)
  }

  const data = await response.json()
  return data.choices[0]?.message?.content?.trim() || 'No se pudo generar respuesta'
}

// ===== MONITOREO Y M√âTRICAS DEL AGENTE =====
interface MetricasAgente {
  timestamp: string
  pregunta: string
  restaurante_id: string
  metodo_utilizado: string
  calidad_respuesta: string
  tiempo_respuesta_ms: number
  intentos_realizados: any[]
  exito: boolean
  error?: string
}

// ===== REGISTRAR M√âTRICAS =====
function registrarMetricas(metricas: MetricasAgente): void {
  try {
    console.log('üìä M√âTRICAS DEL AGENTE:', {
      timestamp: metricas.timestamp,
      metodo: metricas.metodo_utilizado,
      calidad: metricas.calidad_respuesta,
      tiempo: `${metricas.tiempo_respuesta_ms}ms`,
      exito: metricas.exito,
      intentos: metricas.intentos_realizados?.length || 0
    })
    
    // Aqu√≠ se podr√≠an enviar las m√©tricas a un servicio de monitoreo
    // como Datadog, New Relic, o un sistema interno
    
  } catch (error) {
    console.error('‚ùå Error registrando m√©tricas:', error)
  }
}

// ===== VALIDAR CALIDAD DE RESPUESTA =====
function validarCalidadRespuesta(resultadoHibrido: any): string {
  if (!resultadoHibrido) return 'nula'
  
  // Verificar si hay datos SQL v√°lidos
  const tieneDatosSQL = resultadoHibrido.datos_sql && 
                        Array.isArray(resultadoHibrido.datos_sql) && 
                        resultadoHibrido.datos_sql.length > 0
  
  // Verificar si hay resultados sem√°nticos
  const tieneSemanticos = resultadoHibrido.resultados_semanticos && 
                          Array.isArray(resultadoHibrido.resultados_semanticos) && 
                          resultadoHibrido.resultados_semanticos.length > 0
  
  // Determinar calidad
  if (tieneDatosSQL && tieneSemanticos) return 'alta'
  if (tieneDatosSQL || tieneSemanticos) return 'media'
  if (resultadoHibrido.datos_sql && resultadoHibrido.datos_sql.length > 0) return 'baja'
  return 'minima'
}

// ===== GENERAR RESUMEN DE INTENTOS =====
function generarResumenIntentos(intentos: any[]): string {
  if (!intentos || intentos.length === 0) return 'No se realizaron intentos'
  
  const exitosos = intentos.filter(i => i.exito).length
  const fallidos = intentos.filter(i => !i.exito).length
  
  return `${exitosos} exitosos, ${fallidos} fallidos`
}

// ===== VALIDAR PAR√ÅMETROS DE ENTRADA =====
function validarParametrosEntrada(pregunta: string, restauranteId: string): { valido: boolean, errores: string[] } {
  const errores: string[] = []
  
  if (!pregunta || typeof pregunta !== 'string') {
    errores.push('La pregunta debe ser un texto v√°lido')
  } else if (pregunta.trim().length < 3) {
    errores.push('La pregunta debe tener al menos 3 caracteres')
  }
  
  if (!restauranteId || typeof restauranteId !== 'string') {
    errores.push('El restaurante_id debe ser un identificador v√°lido')
  } else if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(restauranteId)) {
    errores.push('El restaurante_id debe tener formato UUID v√°lido')
  }
  
  return {
    valido: errores.length === 0,
    errores
  }
}

// ===== MANEJO INTELIGENTE DE ERRORES =====
async function manejarErrorInteligentemente(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  console.log('üß† Iniciando manejo inteligente de errores...')
  
  // Clasificar el tipo de error
  const tipoError = clasificarError(error)
  console.log('üìä Tipo de error detectado:', tipoError)
  
  switch (tipoError) {
    case 'parametros_invalidos':
      return await generarRespuestaParametrosInvalidos(error, pregunta, restauranteId)
    
    case 'openai_error':
      return await generarRespuestaSinOpenAI(error, pregunta, restauranteId)
    
    case 'sql_error':
      return await generarRespuestaSinSQL(error, pregunta, restauranteId)
    
    case 'semantica_error':
      return await generarRespuestaSinSemantica(error, pregunta, restauranteId)
    
    case 'database_error':
      return await generarRespuestaSinDatabase(error, pregunta, restauranteId)
    
    default:
      return await generarRespuestaGenerica(error, pregunta, restauranteId)
  }
}

// ===== CLASIFICAR TIPOS DE ERROR =====
function clasificarError(error: Error): string {
  const mensaje = error.message.toLowerCase()
  
  if (mensaje.includes('par√°metros') || mensaje.includes('parametros') || mensaje.includes('faltan')) {
    return 'parametros_invalidos'
  }
  
  if (mensaje.includes('openai') || mensaje.includes('api key') || mensaje.includes('gpt')) {
    return 'openai_error'
  }
  
  if (mensaje.includes('sql') || mensaje.includes('consulta') || mensaje.includes('execute')) {
    return 'sql_error'
  }
  
  if (mensaje.includes('sem√°ntica') || mensaje.includes('semantica') || mensaje.includes('embedding')) {
    return 'semantica_error'
  }
  
  if (mensaje.includes('database') || mensaje.includes('supabase') || mensaje.includes('connection')) {
    return 'database_error'
  }
  
  return 'error_generico'
}

// ===== RESPUESTAS ESPEC√çFICAS POR TIPO DE ERROR =====
async function generarRespuestaParametrosInvalidos(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  return {
    success: false,
    error: error.message,
    respuesta: 'Los par√°metros de entrada no son v√°lidos. Por favor, verifica que hayas proporcionado una pregunta y un ID de restaurante v√°lido.',
    tipo_error: 'parametros_invalidos',
    sugerencias: [
      'Aseg√∫rate de que la pregunta tenga al menos 3 caracteres',
      'Verifica que el ID del restaurante sea un UUID v√°lido',
      'Revisa el formato de tu solicitud'
    ],
    parametros_recibidos: {
      pregunta: pregunta || 'No proporcionada',
      restaurante_id: restauranteId || 'No proporcionado'
    }
  }
}

async function generarRespuestaSinOpenAI(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  // Intentar b√∫squeda b√°sica sin OpenAI
  try {
    const resultadoBasico = await busquedaTextualSimple(pregunta, restauranteId)
    
    if (resultadoBasico && resultadoBasico.length > 0) {
      return {
        success: true,
        respuesta: 'No pude usar la inteligencia artificial, pero encontr√© resultados usando una b√∫squeda b√°sica.',
        datos: resultadoBasico,
        metodo_utilizado: 'textual_simple_fallback',
        calidad_respuesta: 'baja',
        advertencia: 'Respuesta generada sin IA debido a problemas t√©cnicos',
        sugerencias: [
          'Los resultados pueden ser menos precisos',
          'Contacta con soporte para resolver el problema de IA'
        ]
      }
    }
  } catch (fallbackError) {
    console.error('‚ùå Fallback tambi√©n fall√≥:', fallbackError)
  }
  
  return {
    success: false,
    error: error.message,
    respuesta: 'No pude procesar tu consulta debido a problemas con el servicio de inteligencia artificial.',
    tipo_error: 'openai_error',
    sugerencias: [
      'Intenta m√°s tarde cuando el servicio est√© disponible',
      'Contacta con soporte t√©cnico',
      'Usa t√©rminos de b√∫squeda m√°s simples'
    ]
  }
}

async function generarRespuestaSinSQL(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  // Intentar solo b√∫squeda sem√°ntica
  try {
    const resultadosSemanticos = await buscarSemanticamente(pregunta, restauranteId)
    
    if (resultadosSemanticos && resultadosSemanticos.length > 0) {
      return {
        success: true,
        respuesta: 'No pude ejecutar la consulta SQL, pero encontr√© productos similares usando b√∫squeda sem√°ntica.',
        resultados_semanticos: resultadosSemanticos,
        metodo_utilizado: 'semantico_fallback',
        calidad_respuesta: 'media',
        advertencia: 'Respuesta generada sin consulta SQL debido a problemas t√©cnicos',
        sugerencias: [
          'Los resultados son aproximados',
          'Contacta con soporte para resolver el problema de base de datos'
        ]
      }
    }
  } catch (semanticError) {
    console.error('‚ùå B√∫squeda sem√°ntica tambi√©n fall√≥:', semanticError)
  }
  
  return {
    success: false,
    error: error.message,
    respuesta: 'No pude ejecutar la consulta en la base de datos.',
    tipo_error: 'sql_error',
    sugerencias: [
      'Verifica que tu pregunta sea clara y espec√≠fica',
      'Intenta reformular la consulta',
      'Contacta con soporte si el problema persiste'
    ]
  }
}

async function generarRespuestaSinSemantica(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  // Intentar solo b√∫squeda textual
  try {
    const resultadoTextual = await busquedaTextualSimple(pregunta, restauranteId)
    
    if (resultadoTextual && resultadoTextual.length > 0) {
      return {
        success: true,
        respuesta: 'No pude usar b√∫squeda sem√°ntica, pero encontr√© resultados usando b√∫squeda por texto.',
        datos: resultadoTextual,
        metodo_utilizado: 'textual_fallback',
        calidad_respuesta: 'baja',
        advertencia: 'Respuesta generada sin an√°lisis sem√°ntico',
        sugerencias: [
          'Los resultados pueden ser menos relevantes',
          'Intenta usar t√©rminos exactos de b√∫squeda'
        ]
      }
    }
  } catch (textualError) {
    console.error('‚ùå B√∫squeda textual tambi√©n fall√≥:', textualError)
  }
  
  return {
    success: false,
    error: error.message,
    respuesta: 'No pude usar la b√∫squeda sem√°ntica avanzada.',
    tipo_error: 'semantica_error',
    sugerencias: [
      'Intenta usar t√©rminos m√°s espec√≠ficos',
      'Reformula tu pregunta de manera m√°s simple'
    ]
  }
}

async function generarRespuestaSinDatabase(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  return {
    success: false,
    error: error.message,
    respuesta: 'No pude acceder a la base de datos en este momento.',
    tipo_error: 'database_error',
    sugerencias: [
      'Intenta m√°s tarde cuando el servicio est√© disponible',
      'Contacta con soporte t√©cnico',
      'Verifica tu conexi√≥n a internet'
    ]
  }
}

async function generarRespuestaGenerica(error: Error, pregunta: string, restauranteId: string): Promise<any> {
  return {
    success: false,
    error: error.message,
    respuesta: 'Ocurri√≥ un error inesperado al procesar tu consulta.',
    tipo_error: 'error_generico',
    sugerencias: [
      'Intenta m√°s tarde',
      'Reformula tu pregunta',
      'Contacta con soporte si el problema persiste'
    ]
  }
}

// ===== RESPUESTAS M√ÅS NATURALES =====
async function generateResponseMejorada(pregunta: string, datos: any, metodo: string): Promise<string> {
  console.log('üí¨ Generando respuesta mejorada...')
  
  // Si no hay datos, respuesta constructiva con sugerencias
  if (!datos || datos.length === 0) {
    const sugerencias = generarSugerenciasConsultas(pregunta)
    
    let respuesta = `No encontr√© datos espec√≠ficos para "${pregunta}". 

Esto puede deberse a:
- No tienes facturas de ese per√≠odo
- El t√©rmino buscado no coincide exactamente
- A√∫n no has subido suficientes facturas

¬øPuedes reformular la pregunta o ser m√°s espec√≠fico?`

    if (sugerencias.length > 0) {
      respuesta += `\n\nTambi√©n podr√≠as preguntar:\n${sugerencias.map(s => `‚Ä¢ ${s}`).join('\n')}`
    }
    
    return respuesta
  }
  
  // Respuesta contextual seg√∫n el tipo de consulta
  const prompt = `
Convierte estos datos en una respuesta natural y √∫til para un restaurante.

PREGUNTA ORIGINAL: "${pregunta}"
M√âTODO USADO: ${metodo}
DATOS ENCONTRADOS: ${JSON.stringify(datos)}

REGLAS:
1. Respuesta en espa√±ol natural
2. Usar formato de moneda espa√±ol (1.250,50 ‚Ç¨)
3. Incluir fechas en formato DD/MM/YYYY
4. Si son muchos resultados, resumir los m√°s importantes
5. Ofrecer insights √∫tiles cuando sea posible
6. Ser espec√≠fico con n√∫meros y cantidades
7. Incluir contexto temporal cuando sea relevante

EJEMPLOS:
- Para √∫ltima factura: "Tu √∫ltima factura fue de [Proveedor] por [importe] el [fecha]"
- Para gastos: "Has gastado [importe] en [per√≠odo]"
- Para productos: "Compraste [cantidad] de [producto] en [per√≠odo]"
- Para proveedores: "Tu proveedor m√°s activo es [nombre] con [X] facturas por [importe total]"

Respuesta natural:
`

  try {
    const respuesta = await callOpenAI(prompt, 0.7, 500)
    console.log('‚úÖ Respuesta mejorada generada')
    return respuesta
  } catch (error) {
    console.error('‚ùå Error generando respuesta mejorada:', error)
    
    // Fallback: Respuesta b√°sica estructurada
    return generarRespuestaFallbackEstructurada(datos, pregunta, metodo)
  }
}

// ===== RESPUESTA FALLBACK ESTRUCTURADA =====
function generarRespuestaFallbackEstructurada(datos: any, pregunta: string, metodo: string): string {
  if (!datos || datos.length === 0) {
    return `No encontr√© resultados para "${pregunta}".`
  }
  
  // Analizar el tipo de datos para generar respuesta contextual
  const primerDato = datos[0]
  
  if (primerDato.numero_factura && primerDato.proveedor_nombre) {
    // Es una factura
    if (datos.length === 1) {
      let respuesta = `Encontr√© una factura de ${primerDato.proveedor_nombre} por ${formatearMoneda(primerDato.total_factura)}.`
      
      // Si tenemos fecha de factura
      if (primerDato.fecha_factura) {
        respuesta += `\nüìÖ Fecha de la factura: ${formatearFecha(primerDato.fecha_factura)}`
      }
      
      // Si tenemos fecha de extracci√≥n
      if (primerDato.fecha_extraccion) {
        respuesta += `\nüïí Lleg√≥ al sistema: ${formatearFecha(primerDato.fecha_extraccion)}`
        
        // Si tenemos tiempo de llegada calculado
        if (primerDato.tiempo_llegada) {
          respuesta += ` (${primerDato.tiempo_llegada})`
        }
      }
      
      // Si hay diferencia entre fechas
      if (primerDato.dias_diferencia && primerDato.dias_diferencia > 0) {
        respuesta += `\n‚ö†Ô∏è Nota: La factura se emiti√≥ ${primerDato.dias_diferencia} d√≠a(s) antes de llegar al sistema.`
      }
      
      return respuesta
    } else {
      let respuesta = `Encontr√© ${datos.length} facturas. La m√°s reciente es de ${primerDato.proveedor_nombre} por ${formatearMoneda(primerDato.total_factura)}.`
      
      if (primerDato.fecha_factura) {
        respuesta += `\nüìÖ Fecha de la factura: ${formatearFecha(primerDato.fecha_factura)}`
      }
      
      if (primerDato.fecha_extraccion) {
        respuesta += `\nüïí Lleg√≥ al sistema: ${formatearFecha(primerDato.fecha_extraccion)}`
        if (primerDato.tiempo_llegada) {
          respuesta += ` (${primerDato.tiempo_llegada})`
        }
      }
      
      return respuesta
    }
  }
  
  if (primerDato.total_gastado || primerDato.total_mes) {
    // Es un resumen de gastos
    const total = primerDato.total_gastado || primerDato.total_mes
    return `El total gastado es ${formatearMoneda(total)}.`
  }
  
  if (primerDato.descripcion_original) {
    // Es un producto
    if (datos.length === 1) {
      return `Encontr√© ${primerDato.cantidad || 1} unidad(es) de ${primerDato.descripcion_original}.`
    } else {
      return `Encontr√© ${datos.length} productos diferentes.`
    }
  }
  
  if (primerDato.proveedor_nombre && primerDato.num_facturas) {
    // Es un resumen de proveedores
    return `Encontr√© ${datos.length} proveedores. El m√°s activo es ${primerDato.proveedor_nombre} con ${primerDato.num_facturas} facturas.`
  }
  
  // Respuesta gen√©rica
  return `Encontr√© ${datos.length} resultados para tu consulta "${pregunta}".`
}

// ===== FUNCIONES DE FORMATEO =====
function formatearMoneda(valor: number): string {
  if (!valor || isNaN(valor)) return '0,00 ‚Ç¨'
  
  return new Intl.NumberFormat('es-ES', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: 2
  }).format(valor)
}

function formatearFecha(fecha: string | Date): string {
  if (!fecha) return 'fecha no disponible'
  
  try {
    const fechaObj = new Date(fecha)
    return fechaObj.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  } catch (error) {
    return 'fecha no v√°lida'
  }
}

// ===== DETECCI√ìN INTELIGENTE DE CONSULTAS RELACIONADAS =====
function detectarConsultasRelacionadas(pregunta: string): string[] {
  const preguntaLower = pregunta.toLowerCase()
  const consultasRelacionadas: string[] = []
  
  // Detectar patrones y sugerir consultas relacionadas
  if (preguntaLower.includes('factura') || preguntaLower.includes('compra')) {
    consultasRelacionadas.push('√∫ltima_factura')
    consultasRelacionadas.push('facturas_esta_semana')
  }
  
  if (preguntaLower.includes('gast') || preguntaLower.includes('dinero') || preguntaLower.includes('total')) {
    consultasRelacionadas.push('gasto_este_mes')
    consultasRelacionadas.push('resumen_anual')
  }
  
  if (preguntaLower.includes('proveedor')) {
    consultasRelacionadas.push('proveedores_activos')
    consultasRelacionadas.push('top_proveedores')
  }
  
  if (preguntaLower.includes('producto')) {
    consultasRelacionadas.push('productos_mas_comprados')
    consultasRelacionadas.push('productos_por_categoria')
  }
  
  if (preguntaLower.includes('mes') || preguntaLower.includes('semana')) {
    consultasRelacionadas.push('gasto_este_mes')
    consultasRelacionadas.push('facturas_esta_semana')
  }
  
  // Remover duplicados y limitar a 3 sugerencias
  return [...new Set(consultasRelacionadas)].slice(0, 3)
}

// ===== GENERAR SUGERENCIAS DE CONSULTAS =====
function generarSugerenciasConsultas(pregunta: string): string[] {
  const consultasRelacionadas = detectarConsultasRelacionadas(pregunta)
  
  const sugerencias: string[] = []
  
  consultasRelacionadas.forEach(tipo => {
    switch (tipo) {
      case '√∫ltima_factura':
        sugerencias.push('¬øCu√°l fue tu √∫ltima factura?')
        break
      case 'ultima_factura_sistema':
        sugerencias.push('¬øCu√°l fue la √∫ltima factura que lleg√≥ al sistema?')
        break
      case 'facturas_recientemente_recibidas':
        sugerencias.push('¬øQu√© facturas has recibido recientemente?')
        break
      case 'facturas_esta_semana':
        sugerencias.push('¬øCu√°ntas facturas tienes esta semana?')
        break
      case 'gasto_este_mes':
        sugerencias.push('¬øCu√°nto has gastado este mes?')
        break
      case 'proveedores_activos':
        sugerencias.push('¬øCu√°les son tus proveedores m√°s activos?')
        break
      case 'productos_mas_comprados':
        sugerencias.push('¬øQu√© productos compras m√°s frecuentemente?')
        break
      case 'resumen_anual':
        sugerencias.push('¬øQuieres ver un resumen de tu a√±o?')
        break
      case 'top_proveedores':
        sugerencias.push('¬øQuieres ver tu ranking de proveedores?')
        break
      case 'productos_por_categoria':
        sugerencias.push('¬øQuieres ver tus gastos por categor√≠a?')
        break
    }
  })
  
  return sugerencias
}