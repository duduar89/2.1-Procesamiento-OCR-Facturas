// ===== CONFIGURACI√ìN CENTRAL SUPABASE =====
// ‚úÖ ARCHIVO √öNICO PARA TODA LA CONFIGURACI√ìN

// Verificar que CONFIG est√° disponible
if (typeof CONFIG === 'undefined') {
    console.error('‚ùå CONFIG no est√° disponible. Cargar config.js primero.');
    throw new Error('config.js debe cargarse antes que config-central.js');
}

// ‚úÖ CLIENTE SUPABASE √öNICO Y CENTRALIZADO
let supabaseClientInstance = null;

// Funci√≥n para inicializar el cliente (solo una vez)
function initializeSupabaseClient() {
    if (supabaseClientInstance) {
        console.log('‚ôªÔ∏è Reutilizando cliente Supabase existente');
        return supabaseClientInstance;
    }
    
    if (!CONFIG.SUPABASE.URL || !CONFIG.SUPABASE.ANON_KEY) {
        throw new Error('Configuraci√≥n de Supabase incompleta. Verificar CONFIG.SUPABASE');
    }
    
    // Verificar que la librer√≠a Supabase est√° disponible
    if (typeof supabase === 'undefined') {
        throw new Error('Librer√≠a Supabase no cargada. Incluir script de Supabase primero.');
    }
    
    try {
        supabaseClientInstance = supabase.createClient(
            CONFIG.SUPABASE.URL,
            CONFIG.SUPABASE.ANON_KEY
        );
        
        console.log('‚úÖ Supabase Client inicializado centralmente');
        console.log('üîó URL:', CONFIG.SUPABASE.URL);
        console.log('üîë Key:', CONFIG.SUPABASE.ANON_KEY.substring(0, 20) + '...');
        
        return supabaseClientInstance;
        
    } catch (error) {
        console.error('‚ùå Error inicializando cliente Supabase:', error);
        throw error;
    }
}

// Funci√≥n para obtener el cliente (siempre usar esta)
function getSupabaseClient() {
    if (!supabaseClientInstance) {
        return initializeSupabaseClient();
    }
    return supabaseClientInstance;
}

// Funci√≥n para verificar conexi√≥n
async function testSupabaseConnection() {
    try {
        const client = getSupabaseClient();
        const { data, error } = await client.from('restaurantes').select('count', { count: 'exact', head: true });
        
        if (error) {
            console.warn('‚ö†Ô∏è Error probando conexi√≥n:', error.message);
            return false;
        }
        
        console.log('‚úÖ Conexi√≥n a Supabase verificada');
        return true;
    } catch (error) {
        console.error('‚ùå Error verificando conexi√≥n:', error);
        return false;
    }
}

// Funci√≥n para reinicializar cliente (en caso de error)
function resetSupabaseClient() {
    supabaseClientInstance = null;
    console.log('üîÑ Cliente Supabase reiniciado');
    return initializeSupabaseClient();
}

// ‚úÖ EXPORTAR FUNCIONES GLOBALMENTE
window.getSupabaseClient = getSupabaseClient;
window.initializeSupabaseClient = initializeSupabaseClient;
window.testSupabaseConnection = testSupabaseConnection;
window.resetSupabaseClient = resetSupabaseClient;

// ‚úÖ MANTENER COMPATIBILIDAD CON C√ìDIGO EXISTENTE
// Crear alias supabaseClient para c√≥digo legacy
Object.defineProperty(window, 'supabaseClient', {
    get: function() {
        console.warn('‚ö†Ô∏è Usando supabaseClient legacy. Cambiar a getSupabaseClient()');
        return getSupabaseClient();
    }
});

// ‚úÖ INICIALIZAR AUTOM√ÅTICAMENTE AL CARGAR
document.addEventListener('DOMContentLoaded', function() {
    try {
        initializeSupabaseClient();
        console.log('‚úÖ Configuraci√≥n central cargada correctamente');
        
        // Test de conexi√≥n opcional (solo en desarrollo)
        if (CONFIG.DEBUG && CONFIG.DEBUG.ENABLED) {
            testSupabaseConnection();
        }
    } catch (error) {
        console.error('‚ùå Error cargando configuraci√≥n central:', error);
    }
});

console.log('üìÑ config-central.js cargado - Cliente Supabase centralizado disponible');